// node - "$outdir/lib.dom.d.ts" <<__JS
const fs = require("fs")
const crypto = require("crypto")
const Path = require("path")

const prog = Path.relative(process.cwd(), __filename)
const outdir = (
  process.argv.length > 2 ? Path.resolve(".", process.argv[2]) :
  "docs"
)

const origwd = process.cwd()
process.chdir(__dirname + "/..")

const libs = {} // { [jsname :string] : { version: string, filename: string } ... }
let s = ""


// dom lib
s = readfile("node_modules/typescript/lib/lib.dom.d.ts") + "\n" +
    readfile("node_modules/typescript/lib/lib.dom.iterable.d.ts")

s = 'declare global { namespace WebDOM {\n' +
    s.replace(/declare\s+|\/\/\/\s*<reference[^\r\n]+/g, "") + "\n" +
    "}} // global namespace WebDOM\n"

addlib("dom", "lib.dom.d.ts", s)


// webworker lib
s = readfile("node_modules/typescript/lib/lib.webworker.d.ts")

s = 'declare global { namespace WebWorkerEnv {\n' +
    s.replace(/declare\s+|\/\/\/\s*<reference[^\r\n]+/g, "") + "\n" +
    "}} // global namespace WebWorkerEnv\n"

addlib("webworker", "lib.webworker.d.ts", s)


// scripter lib
s = readfile("src/common/scripter-env.d.ts")
addlib("scripter", "scripter-env.d.ts", s)


// figma lib
s = readfile("src/app/figma.d.ts")
addlib("figma", "figma.d.ts", s)


// write src/app/tslibs.ts
const tslibsFile = Path.resolve(".", "src/app/tslibs.ts")
const libsjs = (
  `// Do not edit. Generated by ${prog}\n` +
  Object.keys(libs).map(jsname => {
    const js = JSON.stringify(libs[jsname], null, 2).replace(/^  "([^"]+)":/gm, "  $1:")
    return `export const ${jsname} = ${js};`
  }
  ).join("\n") + "\n"
)
writefileIfDifferent(tslibsFile, libsjs)


function addlib(jsname, relFilename, content) {
  const filename = Path.resolve(outdir, relFilename)
  libs[jsname] = {
    filename: Path.basename(relFilename),
    version: versionhash(content),
  }
  writefileIfDifferent(filename, content)
}

function versionhash(s) {
  const h = crypto.createHash("sha1")
  h.update(s)
  return h.digest("base64").replace(/=+/g, "")
}

function readfile(filename) {
  return fs.readFileSync(filename, "utf8")
}

function writefileIfDifferent(filename, content) {
  if (!fs.existsSync(filename) || readfile(filename) !== content) {
    writefile(filename, content)
  }
}

function writefile(filename, content) {
  console.log("Write", Path.relative(origwd, filename))
  fs.writeFileSync(filename, content, "utf8")
}
